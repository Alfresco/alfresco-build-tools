name: "Terraform"

on:
  workflow_call:
    inputs:
      terraform_root_path:
        description: the path to the root module to apply
        type: string
        required: false
        default: .
      terraform_operation:
        description: |
          the terraform operation to perform (plan, apply or destroy).
          If not set, the operation will be determined based on the GitHub event.
          For pull requests, it will run plan and for pushes it will run apply based on the PR plan.
          For pull requests comments, it will run apply if the comment contains 'terraform apply'.
        type: string
        required: false
      terraform_env:
        description: the terraform environment to use (e.g. dev, staging, prod)
        type: string
        required: false
      create_oidc_token_file:
        description: whether to create a file with an OIDC token for AWS
        type: boolean
        required: false
        default: false
      install_kubectl:
        description: whether to install the kubectl CLI
        type: boolean
        required: false
        default: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      BOT_GITHUB_TOKEN:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      RANCHER2_ACCESS_KEY:
        required: false
      RANCHER2_SECRET_KEY:
        required: false

jobs:
  compute_basic_vars:
    name: compute basic variables
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate branch name
        id: basic_vars
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ -n "${{ inputs.terraform_env }}" ]; then
            echo "Using environment from input: ${{ inputs.terraform_env }}"
            echo "environment_name=${{ inputs.terraform_env }}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          BRANCH_NAME=${{ github.base_ref || github.ref_name }}
          if [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "Evaluating branch name for issue_comment event"
            BRANCH_NAME=$(gh pr view ${{ github.event.issue.pull_request.html_url }} --json baseRefName --jq '.baseRefName' 2>/dev/null)
          fi

          if [ "${{ github.event_name }}" == "pull_request_review" ]; then
            echo "Evaluating branch name for pull_request_review event"
            BRANCH_NAME=$(gh pr view ${{ github.event.pull_request.html_url }} --json baseRefName --jq '.baseRefName' 2>/dev/null)
          fi

          BRANCH_LOWER=${BRANCH_NAME,,}
          if [ "$BRANCH_LOWER" == "main" ]; then
            environment="production"
          elif [[ "$BRANCH_LOWER" =~ ^[a-z][a-z0-9-]{3,}$ ]]; then
            environment="${BRANCH_LOWER}"
          else
            echo "$BRANCH_LOWER is not a valid environment name."
            echo "It must:"
            echo " - start with a letter"
            echo " - contain only lowercase chars, numbers, and hyphens"
            echo " - be at least 4 characters long"
            exit 1
          fi

          echo "Using environment: $environment"
          echo "environment_name=${environment}" >> "$GITHUB_OUTPUT"
    outputs:
      environment_name: ${{ steps.basic_vars.outputs.environment_name }}

  terraform:
    runs-on: ubuntu-latest
    needs:
      - compute_basic_vars
    environment: ${{ needs.compute_basic_vars.outputs.environment_name }}
    concurrency:
      group: ${{ needs.compute_basic_vars.outputs.environment_name }}
      cancel-in-progress: false
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RANCHER2_ACCESS_KEY: ${{ secrets.RANCHER2_ACCESS_KEY }}
      RANCHER2_SECRET_KEY: ${{ secrets.RANCHER2_SECRET_KEY }}
      RANCHER2_URL: ${{ vars.RANCHER2_URL }}
      RESOURCE_NAME: ${{ vars.RESOURCE_NAME }}
      TF_VAR_resource_name: ${{ vars.RESOURCE_NAME }}
      TERRAFORM_HTTP_CREDENTIALS: |
        github.com/Alfresco=alfresco-build:${{ secrets.BOT_GITHUB_TOKEN }}
      TERRAFORM_PRE_RUN: |
        set -euo pipefail
        if [ ! -x ./aws/install ]; then
          curl -sSf https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip -q awscliv2.zip
        fi
        ./aws/install
        if [ "${{ inputs.install_kubectl }}" == "true" ]; then
          echo "📦 Downloading latest stable kubectl..."
          KUBECTL_VERSION=$(curl -sSL https://dl.k8s.io/release/stable.txt)
          curl -sSL --max-time 60 --retry 3 -o kubectl "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
          curl -sSL --max-time 60 --retry 3 -o kubectl.sha256 "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl.sha256"

          echo "🔍 Verifying kubectl checksum..."
          if ! echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check --status; then
            echo "❌ Checksum verification failed for kubectl!"
            exit 1
          fi

          echo "🔐 Installing kubectl to /usr/local/bin..."
          install -m 0755 kubectl /usr/local/bin/kubectl
          rm -f kubectl kubectl.sha256

          echo "✅ kubectl installed:"
          kubectl version --client
        else
          echo "⚙️ Skipping kubectl installation"
        fi
      # https://github.com/dflook/terraform-github-actions/tree/main/terraform-apply#applying-a-plan-using-a-comment

      PR_CHECKOUT_REF: refs/pull/${{ github.event.issue.number }}/merge
    steps:
      - name: Check inputs
        run: |
          if [ -z "${{ inputs.terraform_operation }}" ]; then
            echo "terraform_operation is not set, defaulting to github event based handling."
          else
            case "${{ inputs.terraform_operation }}" in
              apply|destroy|plan)
                ;;
              *)
                echo "Invalid terraform_operation: ${{ inputs.terraform_operation }}. Must be 'apply', 'destroy', or 'plan'."
                exit 1
                ;;
            esac
          fi

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event_name == 'issue_comment' && env.PR_CHECKOUT_REF || '' }}

      - name: Install OIDC Client from Core Package
        if: ${{ inputs.create_oidc_token_file }}
        run: npm install @actions/core@1.11.0 @actions/http-client@2.2.3

      - name: Request token
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        if: ${{ inputs.create_oidc_token_file }}
        id: idtoken
        with:
          script: |
            const coredemo = require('@actions/core')
            let id_token = await coredemo.getIDToken("sts.amazonaws.com")
            coredemo.setOutput('id_token', id_token)

      - name: Save token to file
        if: ${{ inputs.create_oidc_token_file }}
        run: echo "${{ steps.idtoken.outputs.id_token }}" >> idtoken.json

      - name: Assume AWS Role if AWS_ROLE_ARN var is set
        uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
        if: vars.AWS_ROLE_ARN != ''
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: TerraformWorkflow

      - name: Load environment variables from yml
        uses: Alfresco/alfresco-build-tools/.github/actions/env-load-from-yaml@v9.3.0
        with:
          yml_path: ${{ inputs.terraform_root_path }}/tfenv.yml

      - name: Check vars requirements
        run: |
          if [ -z "${{ vars.RESOURCE_NAME }}" ]; then
            echo "RESOURCE_NAME must be set in the vars context to provide a unique identifier"
            exit 1
          fi
          if [ -z "${{ vars.TERRAFORM_STATE_BUCKET }}" ]; then
            echo "TERRAFORM_STATE_BUCKET must be set in the vars context"
            exit 1
          fi

      - name: Terraform validate
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review'
        uses: dflook/terraform-validate@03889814f1c6cf2fea714787218b2f4edc85c369 # v2.2.2
        with:
          path: ${{ inputs.terraform_root_path }}
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform plan
        uses: dflook/terraform-plan@dc251c444763eed5defd065b866874b6343017ca # v2.2.2
        if: github.event_name == 'pull_request' || github.event_name == 'pull_request_review' || inputs.terraform_operation == 'plan'
        with:
          label: ${{ vars.RESOURCE_NAME }} ${{ inputs.terraform_root_path }}
          path: ${{ inputs.terraform_root_path }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform apply
        uses: dflook/terraform-apply@8f47d0ad9f3cb9e50fd6b3595c0cb98f00c518df # v2.2.2
        if: github.event_name == 'push' || inputs.terraform_operation == 'apply' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, 'terraform apply'))
        with:
          label: ${{ vars.RESOURCE_NAME }} ${{ inputs.terraform_root_path }}
          path: ${{ inputs.terraform_root_path }}
          auto_approve: ${{ inputs.terraform_operation == 'apply' }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform destroy
        uses: dflook/terraform-destroy@29f7aa889757faa3ff431e7dfe02f661fe4cac6f # v2.2.2
        if: inputs.terraform_operation == 'destroy'
        with:
          path: ${{ inputs.terraform_root_path }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate
