name: "Terraform"

on:
  workflow_call:
    inputs:
      terraform_root_path:
        description: the path to the root module to apply
        type: string
        required: false
        default: .
      terraform_operation:
        description: the terraform operation to perform (apply or destroy)
        type: string
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      BOT_GITHUB_TOKEN:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      RANCHER2_ACCESS_KEY:
        required: false
      RANCHER2_SECRET_KEY:
        required: false

jobs:
  compute_basic_vars:
    name: compute basic variables
    runs-on: ubuntu-latest
    steps:
      - name: Evaluate branch name
        id: basic_vars
        run: |
          BRANCH_NAME=${{ github.base_ref || github.ref_name }}
          BRANCH_LOWER=${BRANCH_NAME,,}
          if [ "$BRANCH_LOWER" == "main" ]; then
            environment="production"
          elif [ "$BRANCH_LOWER" == "develop" ]; then
            environment="develop"
          else
            echo "$BRANCH_LOWER doesn't have a matching environment"
            exit 1
          fi
          echo "environment_name=${environment}" >> $GITHUB_OUTPUT
    outputs:
      environment_name: ${{ steps.basic_vars.outputs.environment_name }}

  terraform:
    runs-on: ubuntu-latest
    needs:
      - compute_basic_vars
    environment: ${{ needs.compute_basic_vars.outputs.environment_name }}
    concurrency:
      group: ${{ needs.compute_basic_vars.outputs.environment_name }}
      cancel-in-progress: false
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RANCHER2_ACCESS_KEY: ${{ secrets.RANCHER2_ACCESS_KEY }}
      RANCHER2_SECRET_KEY: ${{ secrets.RANCHER2_SECRET_KEY }}
      RANCHER2_URL: ${{ vars.RANCHER2_URL }}
      RESOURCE_NAME: ${{ vars.RESOURCE_NAME }}
      TERRAFORM_HTTP_CREDENTIALS: |
        github.com/Alfresco=alfresco-build:${{ secrets.BOT_GITHUB_TOKEN }}
      TERRAFORM_PRE_RUN: |
        if [ ! -x ./aws/install ]; then
          curl -sSf https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip -q awscliv2.zip
        fi
        ./aws/install
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Assume AWS Role if AWS_ROLE_ARN var is set
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        if: vars.AWS_ROLE_ARN != ''
        with:
          aws-region: ${{ env.AWS_DEFAULT_REGION}}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: TerraformWorkflow

      - name: Load environment variables from yml
        uses: Alfresco/alfresco-build-tools/.github/actions/env-load-from-yaml@v6.0.0
        with:
          yml_path: ${{ inputs.terraform_root_path }}/tfenv.yml

      - name: Check vars requirements
        run: |
          if [ -z "${{ vars.RESOURCE_NAME }}" ]; then
            echo "RESOURCE_NAME must be set in the vars context to provide a unique identifier"
            exit 1
          fi
          if [ -z "${{ vars.TERRAFORM_STATE_BUCKET }}" ]; then
            echo "TERRAFORM_STATE_BUCKET must be set in the vars context"
            exit 1
          fi

      - name: Terraform validate
        uses: dflook/terraform-validate@9cfdf207ffbd0ec5d171403a24feb222591ffdc7 # v1.43.0
        with:
          path: ${{ inputs.terraform_root_path }}
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform plan
        uses: dflook/terraform-plan@d9df4f6c2484e709ba7ffaa16c98a6906f4760cd # v1.43.0
        if: github.event_name == 'pull_request'
        with:
          label: ${{ vars.RESOURCE_NAME }} ${{ inputs.terraform_root_path }}
          path: ${{ inputs.terraform_root_path }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform apply
        uses: dflook/terraform-apply@dcda97d729f1843ede471d2fac989cb946f5622a # v1.43.0
        if: github.event_name == 'push' || inputs.terraform_operation == 'apply'
        with:
          label: ${{ vars.RESOURCE_NAME }} ${{ inputs.terraform_root_path }}
          path: ${{ inputs.terraform_root_path }}
          auto_approve: ${{ inputs.terraform_operation == 'apply' }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate

      - name: Terraform destroy
        uses: dflook/terraform-destroy@65f689138f6e3549c0aa2fd92153fce0bead4ed7 # v1.43.0
        if: inputs.terraform_operation == 'destroy'
        with:
          path: ${{ inputs.terraform_root_path }}
          var_file: |
            ${{ inputs.terraform_root_path }}/common.tfvars
            ${{ inputs.terraform_root_path }}/${{ needs.compute_basic_vars.outputs.environment_name }}.tfvars
          backend_config: |
            bucket=${{ vars.TERRAFORM_STATE_BUCKET }}
            key=${{ vars.RESOURCE_NAME }}/${{ inputs.terraform_root_path }}/terraform.tfstate
