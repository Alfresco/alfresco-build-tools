name: Build docker image
description: Build docker image based on supplied jar files
inputs:
  base-directory:
    description: Base working directory
    required: false
    default: .
  image-tag:
    description: tag to be created
    required: true
  image-dir:
    description: Directory holding the Dockerfile. Relative path from base-directory.
    required: true
  docker-username:
    description: Docker.io user name
    required: true
  docker-password:
    description: Docker.io password
    required: true
  quay-username:
    description: Quay.io user name
    required: true
  quay-password:
    description: Quay.io password
    required: true
  ghcr-username:
    description: User name to connect to GHCR
    required: false
    default: ${{ github.actor }}
  ghcr-token:
    description: Github token to connect to GHCR
    required: true
  aws-account-id:
    description: AWS account id to connect to ECR
    required: true
  aws-region:
    description: AWS region to use while pushing to ECR
    required: false
    default: us-east-1
  aws-role-name:
    required: false
    description: AWS role name
    default: GithubOIDCRoleAlfresco
  grype-scan-enabled:
    description: Defines whether a Grype scan should be executed or not
    required: false
    default: 'true'
  grype-fail-build:
    description: Defines whether a Grype scan failure would fail the build
    required: false
    default: 'true'
  preview-label:
    description: The label name for creating a preview version
    required: false
    default: 'preview'
outputs:
  ecr-docker-image-url:
    description: The ECR docker image URL
    value: ${{ steps.set-ecr-docker-image-url.outputs.ecr-docker-image-url }}

runs:
  using: composite
  steps:
    - name: Set is_preview env variable
      env:
        IS_PREVIEW: ${{ github.event_name == 'pull_request' && (contains(github.event.pull_request.labels.*.name, inputs.preview-label) || contains(github.event.pull_request.labels.*.name, inputs.preview-label.default) )}}
      shell: bash
      run: |
        echo "IS_PREVIEW=$IS_PREVIEW" >> $GITHUB_ENV

    - name: set is PUSH_IMAGE env variable
      env:
        PUSH_IMAGE: ${{ github.event_name == 'push' || env.IS_PREVIEW == 'true' }}
      shell: bash
      run: echo "PUSH_IMAGE=$PUSH_IMAGE" >> $GITHUB_ENV

    - name: Set IMAGE_NAME
      shell: bash
      run: |
        REPOSITORY=${DIR##*/}
        # Get the branch or tag name
        REF_NAME="${GITHUB_HEAD_REF:-$GITHUB_REF_NAME}"
        # Limit the reference name to 128 characters to avoid issues with Docker tags
        TRUNC_REF_NAME="${REF_NAME:0:128}"
        TAG="${TAG:-$(echo $TRUNC_REF_NAME | sed -e 's/[^-_.[:alnum:]]/_/g')}"
        echo "IMAGE_REPOSITORY=$REPOSITORY" >> $GITHUB_ENV
        echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV
        echo "IMAGE_NAME=$REPOSITORY:$TAG" >> $GITHUB_ENV
      env:
        DIR: ${{ inputs.image-dir }}
        TAG: ${{ inputs.image-tag }}

    - name: Replace base image
      shell: bash
      working-directory: ${{ inputs.base-directory }}
      run: |
        cp ./Dockerfile $DIR/Dockerfile.new
        cp ./entrypoint.sh ./$DIR
        tail -n +2 $DIR/Dockerfile >> $DIR/Dockerfile.new
        mv $DIR/Dockerfile{.new,}
      env:
        DIR: ${{ inputs.image-dir }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      with:
        version: v0.11.0
        # apply fix from https://github.com/moby/buildkit/issues/3969
        driver-opts: |
          image=moby/buildkit:v0.11.6
          network=host

    - name: Login to docker.io
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        username: ${{ inputs.docker-username }}
        password: ${{ inputs.docker-password }}

    - name: Build image ${{ env.IMAGE_NAME }} and export to docker
      if: inputs.grype-scan-enabled == 'true'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.base-directory }}/${{ inputs.image-dir }}
        tags: test-${{ env.IMAGE_NAME }}
        load: true
        provenance: false

    - name: Anchore Scan API Image
      if: inputs.grype-scan-enabled == 'true'
      uses: anchore/scan-action@f6601287cdb1efc985d6b765bbf99cb4c0ac29d8 # v7.0.0
      id: scan
      with:
        fail-build: ${{ inputs.grype-fail-build }}
        image: test-${{ env.IMAGE_NAME }}
        output-format: sarif
        severity-cutoff: critical

    - name: Echo sarif
      if: always() && inputs.grype-scan-enabled == 'true'
      shell: bash
      run: echo "$(<results.sarif )"

    - name: Upload SARIF Files
      if: always() && inputs.grype-scan-enabled == 'true' && github.event_name == 'push'
      uses: github/codeql-action/upload-sarif@303c0aef88fc2fe5ff6d63d3b1596bfd83dfa1f9 # v3.29.5
      continue-on-error: true # do not fail if GHAS is not enabled
      with:
        sarif_file: ${{ steps.scan.outputs.sarif }}

    - name: Extract metadata for Docker
      if: env.PUSH_IMAGE == 'true'
      id: meta
      uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
      with:
        images: ${{ env.IMAGE_NAME }}
        labels: |
          org.opencontainers.image.version=${{ env.IMAGE_TAG }}

    - name: Login to quay.io
      if: env.PUSH_IMAGE == 'true'
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: quay.io
        username: ${{ inputs.quay-username }}
        password: ${{ inputs.quay-password }}

    - name: Login to ghcr.io
      if: env.PUSH_IMAGE == 'true'
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr-username }}
        password: ${{ inputs.ghcr-token }}

    - name: Configure AWS credentials
      if: env.PUSH_IMAGE == 'true'
      uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v5.0.0
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::${{ inputs.aws-account-id }}:role/${{ inputs.aws-role-name }}
        role-session-name: gh-${{ env.IMAGE_REPOSITORY }}
        role-duration-seconds: 900

    - name: Login to Amazon ECR
      if: env.PUSH_IMAGE == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1
      with:
        mask-password: true

    - name: Create ECR repository if needed
      if: env.PUSH_IMAGE == 'true'
      shell: bash
      run: |
        aws ecr describe-repositories --repository-names ${IMAGE_REPOSITORY} \
          || aws ecr create-repository --repository-name ${IMAGE_REPOSITORY}

    # the build is done again only for new arch platforms
    # see https://docs.docker.com/build/ci/github-actions/test-before-push/
    - name: Build and Push image ${{ env.IMAGE_NAME }}
      id: build-and-push
      if: env.PUSH_IMAGE == 'true'
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: ${{ inputs.base-directory }}/${{ inputs.image-dir }}
        platforms: linux/amd64,linux/arm64/v8
        tags: |
          quay.io/alfresco/${{ env.IMAGE_NAME }}
          ghcr.io/alfresco/${{ env.IMAGE_NAME }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        provenance: false

    - name: Print tags
      if: env.PUSH_IMAGE == 'true'
      shell: bash
      run: |
        {
          echo "### :rocket: Docker image built"
          echo "Quay:"
          echo "\`\`\`\`"
          echo "quay.io/alfresco/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}"
          echo " \`\`\`\`"
          echo "GHCR:"
          echo "\`\`\`\`"
          echo "ghcr.io/alfresco/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}"
          echo "\`\`\`\`"
          echo "AWS ECR:"
          echo "\`\`\`\`"
          echo "${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}"
          echo "\`\`\`\`"
        } >> $GITHUB_STEP_SUMMARY

    - name: set ecr-docker-image-url
      id: set-ecr-docker-image-url
      if: env.PUSH_IMAGE == 'true'
      shell: bash
      run: echo "ecr-docker-image-url=${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}" >> $GITHUB_OUTPUT
