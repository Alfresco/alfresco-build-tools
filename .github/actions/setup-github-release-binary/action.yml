name: Setup GitHub Release Binary
description: 'Set up a specific version of a binary from GitHub Releases and add it to the PATH.'
inputs:
  repo:
    description: 'Repository of binary in the form owner/repo'
    required: true
  version:
    description: 'Version of binary'
    required: true
  url_template:
    description: 'Template for download url, can use VERSION/NAME/OS/ARCH env vars'
    required: false
    default: 'v${VERSION}/${NAME}_${VERSION}_${OS}_${ARCH}.tar.gz'
  test_args:
    description: 'Arguments to test the binary'
    required: false
    default: '--version'
  x86_64_arch:
    description: 'Override the package architecture when x86_64'
    required: false
    default: 'amd64'
  aarch64_arch:
    description: 'Override the package architecture when aarch64'
    required: false
    default: 'arm64'
  binary_name:
    description: 'Override the binary name, defaults to repo name'
    required: false
    default: ''
runs:
  using: "composite"
  steps:
    - shell: bash
      env:
        REPO: ${{ inputs.repo }}
        VERSION: ${{ inputs.version }}
        URL_TEMPLATE: ${{ inputs.url_template }}
        BINARY_NAME: ${{ inputs.binary_name }}
      run: |
        NAME=${BINARY_NAME:-${REPO##*\/}}
        OS=${OS:-$(uname | tr '[:upper:]' '[:lower:]')}
        ARCH_RAW=$(uname -m)
        case $ARCH_RAW in
          x86_64) ARCH=${ARCH:-${{ inputs.x86_64_arch }}} ;;
          aarch64) ARCH=${ARCH:-${{ inputs.aarch64_arch }}} ;;
          *) ARCH=${ARCH:-$ARCH_RAW} ;;
        esac

        URL=https://github.com/$REPO/releases/download/$(eval echo $URL_TEMPLATE)
        ARCHIVE=$(basename "$URL")

        echo "Downloading $URL ..."
        curl -fsSL -o "$ARCHIVE" "$URL"

        if [[ "$ARCHIVE" == *.zip ]]; then
          unzip -j -qq "$ARCHIVE" "*$NAME" -d .
        else
          tar -xzf "$ARCHIVE" "$NAME"
        fi
        rm -f "$ARCHIVE"

        sudo mv $NAME /usr/local/bin/$NAME
        $NAME ${{ inputs.test_args }}
