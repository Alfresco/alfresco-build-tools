name: "Setup a KinD cluster"
description: "Spin a local Kubernetes cluster with ingress-nginx"
inputs:
  kind-version:
    description: |
      The kind version to use. Versions available at:
      https://github.com/kubernetes-sigs/kind/releases
    default: v0.20.0
  kind-node-image:
    description: |
      The Kind docker node image to use. Should match the same kind version at:
      https://github.com/kubernetes-sigs/kind/releases
    default: kindest/node:v1.27.3@sha256:3966ac761ae0136263ffdb6cfd4db23ef8a83cba8a463690e98317add2c9ba72
  kind-wait:
    description: The duration to wait for the control plane to become ready
    default: 60s
  ingress-nginx-ref:
    description: |
      the Nginx ingress ref to get the ingress controller deployment manifest from
      (https://github.com/kubernetes/ingress-nginx). Consider main (the default) a floating tag which can result in
      deploying any version (including betas) and non repeatable builds.
    default: main
  metrics:
    description: Wether Metrics sevre should be installed with KinD
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Create cluster
      uses: helm/kind-action@99576bfa6ddf9a8e612d83b513da5a75875caced # v1.9.0
      with:
        config: ${{ github.action_path }}/kind.yml
        version: ${{ inputs.kind-version }}
        node_image: ${{ inputs.kind-node-image }}
        wait: ${{ inputs.kind-wait }}

    - name: Install Metrics Server
      shell: bash
      if: inputs.metrics == 'true'
      run: >-
        helm install --repo https://kubernetes-sigs.github.io/metrics-server/
        --set args={--kubelet-insecure-tls}
        metrics-server metrics-server
        --namespace kube-system

    - name: Install ingress-nginx
      shell: bash
      env:
        NGINX_MANIFEST_URL: >-
          https://raw.githubusercontent.com/kubernetes/ingress-nginx/${{ inputs.ingress-nginx-ref }}/deploy/static/provider/kind/deploy.yaml
      run: |
        kubectl apply -f "${NGINX_MANIFEST_URL}"

    - name: Wait for ingress ready
      shell: bash
      run: |
        kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=90s
