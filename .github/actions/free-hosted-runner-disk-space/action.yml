name: "Free GHA runner disk space"
description: "Removes unnecessary files from the runner."
inputs:
  merge-disk-volumes:
    description: 'Triggers usage of maximize-build-space action to take advantage of unused disk space. Disabled by default due to long duration.'
    required: false
    default: 'false'
  root-reserve-mb:
    description: 'Space to be left free on the root filesystem, in Megabytes. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '12288'
  temp-reserve-mb:
    description: 'Space to be left free on the temp filesystem (/mnt), in Megabytes. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '100'
  swap-size-mb:
    description: 'Swap space to create, in Megabytes. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '1024'
  overprovision-lvm:
    description: |
      Create the LVM disk images as sparse files, making the space required for the LVM image files *appear* unused on the
      hosting volumes until actually allocated. Use with care, this can lead to surprising out-of-disk-space situations.
      You should prefer adjusting root-reserve-mb/temp-reserve-mb over using this option.
    required: false
    default: 'false'
  build-mount-path:
    description: 'Absolute path to the mount point where the build space will be available, defaults to /var/lib/docker/ if unset. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '/var/lib/docker/'
  build-mount-path-ownership:
    description: 'Ownership of the mount point path, defaults to standard "runner" user and group. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: 'runner:runner'
  pv-loop-path:
    description: 'Absolute file path for the LVM image created on the root filesystem, the default is usually fine. Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '/pv.img'
  tmp-pv-loop-path:
    description: 'Absolute file path for the LVM image created on the temp filesystem, the default is usually fine. Must reside on /mnt . Only applicable if merge-disk-volumes is set to true.'
    required: false
    default: '/mnt/tmp-pv.img'
  remove-dotnet:
    description: 'Removes .NET runtime and libraries. (frees ~17 GB)'
    required: false
    default: 'true'
  remove-boost:
    description: 'Removes Boost C++ libraries. (frees ~1 GB)'
    required: false
    default: 'true'
  remove-haskell:
    description: 'Removes GHC (Haskell) artifacts. (frees ~2.7 GB)'
    required: false
    default: 'true'
  remove-tools-cache:
    description: 'Removes tools and dependencies cached. (frees ~3 GB)'
    required: false
    default: 'true'
  remove-android:
    description: 'Removes Android SDKs and Tools. (frees ~11 GB)'
    required: false
    default: 'false'
  remove-codeql:
    description: 'Removes CodeQL Action Bundles. (frees ~5.4 GB)'
    required: false
    default: 'false'
  remove-docker-images:
    description: 'Removes cached Docker images. (frees ~3 GB)'
    required: false
    default: 'false'
  to-remove:
    description: 'Additional collection of files/folders to be removed'
    default: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: bash
      run: |
        echo "Memory and swap:"
        sudo free
        echo
        sudo swapon --show
        echo

        echo "Available storage:"
        sudo df -h
        echo

    - name: Move /var/lib/docker/
      if: ${{ inputs.merge-disk-volumes == 'true' }}
      run: sudo mv /var/lib/docker/ "${GITHUB_WORKSPACE}/docker"
      shell: bash

    - name: Remove unnecessary files
      run: |
        echo "Removing unwanted software... "
        to_remove="${{ inputs.to-remove }}"
        if [[ ${{ inputs.remove-dotnet }} == 'true' ]]; then
          sudo rm -rf /usr/share/dotnet
        fi
        if [[ ${{ inputs.remove-android }} == 'true' ]]; then
          sudo rm -rf /usr/local/lib/android
        fi
        if [[ ${{ inputs.remove-haskell }} == 'true' ]]; then
          sudo rm -rf /opt/ghc
        fi
        if [[ ${{ inputs.remove-codeql }} == 'true' ]]; then
          sudo rm -rf /opt/hostedtoolcache/CodeQL
        fi
        if [[ ${{ inputs.remove-docker-images }} == 'true' ]]; then
          sudo docker image prune --all --force
        fi
        if [[ ${{ inputs.remove-boost }} == 'true' ]]; then
          sudo rm -rf /usr/local/share/boost
        fi
        if [[ ${{ inputs.remove-tools-cache }} == 'true' ]]; then
          sudo rm -rf $AGENT_TOOLSDIRECTORY
        fi
        if [[ -n "$to_remove" ]]; then
          sudo rm -rf $to_remove
        fi
        echo "... done"
      shell: bash

    - name: Maximize build space
      if: ${{ inputs.merge-disk-volumes == 'true' }}
      uses: easimon/maximize-build-space@fc881a613ad2a34aca9c9624518214ebc21dfc0c # v10
      with:
        root-reserve-mb: ${{ inputs.root-reserve-mb }}
        temp-reserve-mb: ${{ inputs.temp-reserve-mb }}
        swap-size-mb: ${{ inputs.swap-size-mb }}
        overprovision-lvm: ${{ inputs.overprovision-lvm }}
        build-mount-path: ${{ inputs.build-mount-path }}
        build-mount-path-ownership: ${{ inputs.build-mount-path-ownership }}
        pv-loop-path: ${{ inputs.pv-loop-path }}
        tmp-pv-loop-path: ${{ inputs.tmp-pv-loop-path }}

    - name: Restore /var/lib/docker/
      if: ${{ inputs.merge-disk-volumess == 'true' }}
      run: sudo sh -c "mv ${GITHUB_WORKSPACE}/docker/* /var/lib/docker"
      shell: bash

    - name: Disk space report after modification
      run: |
        echo "Memory and swap:"
        sudo free
        echo
        sudo swapon --show
        echo

        echo "Available storage:"
        sudo df -h
      shell: bash
