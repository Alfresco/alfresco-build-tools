name: Scan docker image directories
description: Scan the directories Dockerfile
inputs:
  base-directory:
    description: base directory to be scanned
    required: false
    default: .
  name-shortener-pattern:
    description: >-
      Pattern to be removed from the directory name while generating the the field `short-name`. This is useful to remove a common prefix from the name.
      For instance, if the directory path is `./some/path/to/my/docker-image/images-my-service` and the pattern is `images-`, the resulting
        `short-name` will be `my-service`. In the case where no pattern is provided, the short name will be the same as the directory name, i.e. `images-my-service`.
    required: false
    default: ""
outputs:
  image-dirs-as-json:
    description: list of directories containing Dockerfile formatted as JSON
    value: ${{ steps.scan-image-dirs.outputs.image-dirs-as-json }}
  image-dirs-with-metadata:
      description: >-
        JSON containing the list of all directories containing Dockerfile including metadata. i.e. path to the directory,
        whether the docker docker image should be skipped or not and shortened name of the directly (useful for display
        names in the CI for instance).
        This includes directories with `docker.skip=true`
      value: ${{ steps.scan-image-dirs.outputs.image-dirs-with-metadata }}
runs:
  using: composite
  steps:
    - id: scan-image-dirs
      name: Scan Image Dirs
      shell: bash
      working-directory: ${{ inputs.base-directory }}
      env:
        NAME_SHORTENER_PATTERN: ${{ inputs.name-shortener-pattern }}
      run: |
        IMAGE_DIRS=$(find . -type f -mindepth 2 -name Dockerfile | grep -v target | xargs -I% dirname % | xargs || echo "")
        echo "image dirs IMAGE_DIRS=$IMAGE_DIRS"

        FILTERED_IMAGE_DIRS=()
        IMAGE_DIRS_WITH_METADATA="[]"
        for IMAGE_DIR in $IMAGE_DIRS; do
          export IMAGE_DIR
          echo checking $IMAGE_DIR

          SKIP_DOCKER=$(yq '.project.properties.["docker.skip"] // "false"' "$IMAGE_DIR/pom.xml")
          export SKIP_DOCKER

          if [ "$SKIP_DOCKER" = "false" ]; then
            echo add $IMAGE_DIR
            FILTERED_IMAGE_DIRS+=($IMAGE_DIR)
          fi

          IMAGE_DIRS_WITH_METADATA=$(echo $IMAGE_DIRS_WITH_METADATA | yq -o json -I=0 \
             '. + {"path" : env(IMAGE_DIR), "skip-docker" : env(SKIP_DOCKER), "short-name" : env(IMAGE_DIR) | sub(".*\/", "")}' )

        done

        if [ "$NAME_SHORTENER_PATTERN" != "" ]; then
          IMAGE_DIRS_WITH_METADATA=$(echo $IMAGE_DIRS_WITH_METADATA | yq -o json -I=0 \
          '. | map(.["short-name"] |= sub(env(NAME_SHORTENER_PATTERN), ""))')
        fi

        echo "filtered image dirs FILTERED_IMAGE_DIRS=${FILTERED_IMAGE_DIRS[@]}"
        IMAGE_DIRS_AS_JSON=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${FILTERED_IMAGE_DIRS[@]}")
        echo "generated image dirs matrix IMAGE_DIRS_AS_JSON=$IMAGE_DIRS_AS_JSON"
        echo "image-dirs-as-json=$IMAGE_DIRS_AS_JSON" >> $GITHUB_OUTPUT

        echo "Generated dirs matrix with metadata:"
        echo "$IMAGE_DIRS_WITH_METADATA" | yq -o=json
        echo "image-dirs-with-metadata=$IMAGE_DIRS_WITH_METADATA" >> $GITHUB_OUTPUT
